<?php

namespace Clear\UserBundle\Repository;
use Clear\ContentBundle\Model\FilterDate;
use Clear\ContentBundle\Util\Util;
use Clear\UserBundle\Entity\User;
use Symfony\Component\HttpFoundation\ParameterBag;
use Symfony\Component\HttpFoundation\Request;
use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /**
     * @param Request $request
     * @param User $user
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getSearchResult(ParameterBag $request, User $user)
    {

        $query = $this->createQueryBuilder('user');

        if($user->isRole('Admin') ) {
            if($request->has('name')) {
                $query->where('user.lastName LIKE :name')
                    ->setParameter('name', $request->get('name')."%")
                    ->orWhere('user.name LIKE :name')
                    ->setParameter('name', $request->get('name')."%");

            }

            $FilterDate = new FilterDate('user.lastLogin');
            $FilterDate->getFilterDate($query, $request);
        }
        return $query;




        /*      if (in_array('Admin', $util->getRoles($user))) {
            $this->getSearchForRoleAdmin($query, $request);
        } else {
            $this->getSearchForRoleAdmin($query, $request);
        }*/


    }

    /**
     * @param $query
     * @param Request $request
     * @return mixed
     */
    public function getSearchForRoleAdmin($query, Request $request)
    {
        if ($request->get('fullName')) {
            $query->andWhere('u.name = :fullName OR u.lastName = :fullName')
                ->setParameter('fullName',  $request->get('fullName'));
        }

        if ($request->get('email')) {
            $query->andWhere('u.email = :email')
                ->setParameter('email',  $request->get('email'));
        }

        if ($request->get('companies')) {
            $query->leftJoin('u.company', 'company')
                ->andWhere('company.id IN (:companies)')
                ->setParameter('companies',  $request->get('companies'));
        }

        if ($request->get('roles')) {
            $query->leftJoin('u.roleUsers', 'roles')
                ->andWhere('roles.id IN (:roles)')
                ->setParameter('roles',  $request->get('roles'));
        }

        return $query;
    }

    public function getActiveUsers()
    {
        $query = $this->createQueryBuilder('u')
            ->leftJoin('u.roleUsers', 'roleUsers')
            ->where('u.enabled = :status')
            ->andWhere('roleUsers.name = :name')
            ->setParameters(['status' => 1, 'name' => 'User'])
            ->getQuery()
           ->getResult();

        return $query;
    }
}
